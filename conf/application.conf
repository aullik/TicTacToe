# This is the main configuration file for the application.
# ~~~~~

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.tictactoe.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
}


## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module
  enabled += "tictactoe.TicTacToeServerModule"
  enabled += "tictactoe.silhouette.TicTacToeWebModule"

  # If there are any built-in modules that you want to disable, you can list them here.
  disabled += "Module"
  #disabled += ""
  disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
  disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"
}

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret = "TicTacToeApplicationsSecret"

# The application languages
# ~~~~~
application.langs = "en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

# Silhouette Authentication
# ~~~~~

# Allow all proxies for Heroku so that X-Forwarded headers can be read by Play
play.http.forwarded.trustedProxies=["0.0.0.0/0", "::/0"]
silhouette {

  # Facebook provider
  facebook.redirectURL = "https://tictactoethreed.herokuapp.com/authenticate/facebook"

  # Google provider
  google.redirectURL = "https://tictactoethreed.herokuapp.com/authenticate/google"

  # GitHub Provider
  github.redirectURL = "https://tictactoethreed.herokuapp.com/authenticate/github"

  # OAuth2 state provider settings
  oauth2StateProvider.cookieName = "OAuth2State"
  oauth2StateProvider.cookiePath = "/"
  oauth2StateProvider.secureCookie = true // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  oauth2StateProvider.httpOnlyCookie = true
  oauth2StateProvider.expirationTime = 5 minutes

  oauth2StateProvider.cookie.signer.key = "Uoe3Bs!MKdZ76p6XqWQmx74euN53c66M" // A unique encryption key
  oauth2StateProvider.cookie.signer.key = "N&TET2KLVA=5#t_B#YVmAznkUVccFBs&QbPFm@mNsEeKe"

  # Facebook provider
  facebook.authorizationURL = "https://graph.facebook.com/v2.3/oauth/authorize"
  facebook.accessTokenURL = "https://graph.facebook.com/v2.3/oauth/access_token"
  facebook.clientID = ""
  facebook.clientID = "1277875742301398"
  facebook.clientSecret = ""
  facebook.clientSecret = "206184162915dfa08af64f32f3d5b323"
  facebook.scope = "email"

  # Google provider
  google.authorizationURL = "https://accounts.google.com/o/oauth2/auth"
  google.accessTokenURL = "https://accounts.google.com/o/oauth2/token"
  google.clientID = ""
  google.clientID = "765076335010-g6eq3grme1417qm3rdgg4v8svm0msjq3.apps.googleusercontent.com"
  google.clientSecret = ""
  google.clientSecret = "bSkg2H8KsoieLLY2IG_k2Syw"
  google.scope = "profile email"

  # Github provider
  github.authorizationURL = "https://github.com/login/oauth/authorize"
  github.accessTokenURL = "https://github.com/login/oauth/access_token"
  github.clientID = ""
  github.clientID = "ca65d1ee581449b59746"
  github.clientSecret = ""
  github.clientSecret = "9b7a13814cea5a80b1a8c576faf140978cb1980e"
  github.scope = "user"

  authenticator {
    cookieName = "id"
    cookiePath = "/"
    secureCookie = true # Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
    httpOnlyCookie = true
    useFingerprinting = true
    authenticatorIdleTimeout = 30 minutes
    authenticatorExpiry = 12 hours

    rememberMe {
      cookieMaxAge = 30 days
      authenticatorIdleTimeout = 5 days
      authenticatorExpiryInDays = 30
    }

    cookie.signer {
      key = "TicTacToeCookieSignerKey" # A unique encryption key
      pepper = "-mohiva-tictactoe.silhouette-cookie-signer-" # Constant prepended and appended to the data before signing. When using one key for multiple purposes, using a specific pepper reduces some risks arising from this.
    }
    crypter.key = "TicTactoeCrypterKey" # A unique encryption key
  }
}
# Mailer
# ~~~~~

play.mailer {
  # SMTP serveur, example : smtp.gmail.com
  host = smtp.gmail.com

  # Mail Port, example : 465, 587 or 25
  port = 465

  # Mail Auth User, example : user@gmail.com
  user = "your@gmail.com"

  # Mail Auth Password
  password = yourpassword

  # Mail SSL : true or false
  ssl = true

  # Will only log all the email properties instead of sending an email
  mock = true

  # Mail user from
  from = "your@gmail.com"
}